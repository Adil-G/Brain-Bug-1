<-----Page 0----->Morgan Kaufmann Publishers

September 14, 2016

EECS2021
Computer Organization
Fall 2015
The slides are based on the publisher slides
and contribution from Profs Amir Asif and
Peter Lian
The slides will be modified, annotated,
explained on the board, and sometimes
corrected in the class

EECS2021 Computer Organization






Computer Organization and Design– The
hardware/Software approach – ARM Edition
Patterson and John Hennessy
Morgan kaufmann
Assessment:






Participation
Quizzes
Lab
Midterm
Final

5%
20%
20%
20%
35%
Chapter 1 — Computer Abstractions and Technology — 2

EECS2021 Computer Organization




Monday and Wednesday 5:30-7:00pm
LAS B
2 Lab sections




Monday, Tuesday 7-10pm LAS 1006

Labs are posted on the course web page

Chapter 1 — Computer Abstractions and Technology — 3

Chapter 1 — Computer Abstractions and Technology

1

<-----Page 1----->Morgan Kaufmann Publishers

September 14, 2016

EECS2021


Instructor





Mokhtar Aboelaze
Office LAS2026 Phone ext: 40607

Research interests





Computer Architecture
Low power architecture
Embedded systems
FPGA (in embedded applications)

Chapter 1 — Computer Abstractions and Technology — 4

Topics







Computer abstraction and technology – Ch 1
Instruction language of the computer – Ch 2
Verilog -- Notes
Arithmetic for computers – Ch 3
The processor – Ch 4
Memory hierarchy and I/O – Ch 5

Chapter 1 — Computer Abstractions and Technology — 5

What You Will Learn


How programs are translated into the
machine language





The hardware/software interface
What determines program performance






And how the hardware executes them

And how it can be improved

How the ALU works and how to improve its
performance using pipelining.
Memory Hierarchy and I/O (basic
operation)
Chapter 1 — Computer Abstractions and Technology — 6

Chapter 1 — Computer Abstractions and Technology

2

<-----Page 2----->Morgan Kaufmann Publishers

September 14, 2016

Why EECS2021





Required
You can not call yourself ECE or CS if you
don’t know pipelining, assembly, how to
measure performance, or how to report
performance.
Knowledge of hardware helps you write
better programs

Chapter 1 — Computer Abstractions and Technology — 7



Progress in computer technology




Underpinned by Moore’s Law

Makes novel applications feasible








§1.1 Introduction

The Computer Revolution

Computers in automobiles
Cell phones
Human genome project
World Wide Web
Search Engines

Computers are pervasive
Chapter 1 — Computer Abstractions and Technology — 8

Classes of Computers


Desktop computers





Server computers






General purpose, variety of software
Subject to cost/performance tradeoff
Network based
High capacity, performance, reliability
Range from small servers to building sized

Embedded computers



Hidden as components of systems
Stringent power/performance/cost constraints
Chapter 1 — Computer Abstractions and Technology — 9

Chapter 1 — Computer Abstractions and Technology

3

<-----Page 3----->Morgan Kaufmann Publishers

September 14, 2016

The Processor Market

Chapter 1 — Computer Abstractions and Technology — 10

The Processor Market

Chapter 1 — Computer Abstractions and Technology — 11

Trends -- Moore’s law

Source: http://en.wikipedia.org/wiki/Moore's_law

Chapter 1 — Computer Abstractions and Technology — 12

Chapter 1 — Computer Abstractions and Technology

4

<-----Page 4----->Morgan Kaufmann Publishers

September 14, 2016

Trends -- Performance

Chapter 1 — Computer Abstractions and Technology — 13

Power


Power = Switching Activity  Capacitance  V2  f



Static power and its effect

Chapter 1 — Computer Abstractions and Technology — 14

Eight Great Ideas
1.
2.
3.
4.
5.
6.
7.
8.

Design for Moore’s Law
Use Abstraction to Simplify Design
Make the Common case fast
Performance via Parallelism
Performance via Pipelining
Performance via Prediction
Hierarchy of Memories
Dependability via Redundancy
Chapter 1 — Computer Abstractions and Technology — 15

Chapter 1 — Computer Abstractions and Technology

5

<-----Page 5----->Morgan Kaufmann Publishers

September 14, 2016



Application software



System software







Written in high-level language
Compiler: translates HLL code to
machine code
Operating System: service code






§1.2 Below Your Program

Below Your Program

Handling input/output
Managing memory and storage
Scheduling tasks & sharing resources

Hardware


Processor, memory, I/O controllers
Chapter 1 — Computer Abstractions and Technology — 16

How computers work?






In your first year, you studies programming
(java)
Sequence of instructions
Translated to machine language
Instructions are fetched from the memory
one after the other and executed

Chapter 1 — Computer Abstractions and Technology — 17

Levels of Program Code


High-level language






Assembly language




Level of abstraction closer
to problem domain
Provides for productivity
and portability
Textual representation of
instructions

Hardware representation



Binary digits (bits)
Encoded instructions and
data
Chapter 1 — Computer Abstractions and Technology — 18

Chapter 1 — Computer Abstractions and Technology

6

<-----Page 6----->Morgan Kaufmann Publishers

September 14, 2016

Understanding Performance


Algorithm



Programming language, compiler, architecture





Determines number of operations executed
Determine number of machine instructions executed
per operation



Processor and memory system



I/O system (including OS)





Determine how fast instructions are executed
Determines how fast I/O operations are executed

Chapter 1 — Computer Abstractions and Technology — 19

The BIG Picture



Same components for
all kinds of computer




Desktop, server,
embedded

§1.3 Under the Covers

Components of a Computer

Input/output includes


User-interface devices



Storage devices



Network adapters







Display, keyboard, mouse
Hard disk, CD/DVD, flash
For communicating with
other computers

Chapter 1 — Computer Abstractions and Technology — 20

Anatomy of a Computer
Output
device

Network
cable

Input
device

Input
device

Chapter 1 — Computer Abstractions and Technology — 21

Chapter 1 — Computer Abstractions and Technology

7

<-----Page 7----->Morgan Kaufmann Publishers

September 14, 2016

Anatomy of a Mouse


Optical mouse





LED illuminates
desktop
Small low-res camera
Basic image processor






Looks for x, y
movement

Buttons & wheel

Supersedes roller-ball
mechanical mouse

Chapter 1 — Computer Abstractions and Technology — 22

Through the Looking Glass


LCD screen: picture elements (pixels)


Mirrors content of frame buffer memory

Chapter 1 — Computer Abstractions and Technology — 23

Opening the Box

Chapter 1 — Computer Abstractions and Technology — 24

Chapter 1 — Computer Abstractions and Technology

8

<-----Page 8----->Morgan Kaufmann Publishers

September 14, 2016

A Safe Place for Data


Volatile main memory



Non-volatile secondary memory







Loses instructions and data when power off
Magnetic disk
Flash memory
Optical disk (CDROM, DVD)

Chapter 1 — Computer Abstractions and Technology — 25

Networks



Communication and resource sharing
Local area network (LAN): Ethernet





Within a building

Wide area network (WAN: the Internet
Wireless network: WiFi, Bluetooth

Chapter 1 — Computer Abstractions and Technology — 26

Inside the Processor (CPU)




Datapath: performs operations on data
Control: sequences datapath, memory, ...
Cache memory


Small fast SRAM memory for immediate
access to data

Chapter 1 — Computer Abstractions and Technology — 27

Chapter 1 — Computer Abstractions and Technology

9

<-----Page 9----->Morgan Kaufmann Publishers

September 14, 2016

Inside the Processor


AMD Barcelona: 4 processor cores

Chapter 1 — Computer Abstractions and Technology — 28

Abstractions
The BIG Picture


Abstraction helps us deal with complexity



Instruction set architecture (ISA)



Application binary interface









Hide lower-level detail
The hardware/software interface
The ISA plus system software interface

Implementation


The details underlying and interface
Chapter 1 — Computer Abstractions and Technology — 29

Technology Trends


Electronics
technology
continues to evolve




Increased capacity
and performance
Reduced cost

Year

Technology

1951

Vacuum tube

1965

Transistor

1975

Integrated circuit (IC)

1995

Very large scale IC (VLSI)

2005

Ultra large scale IC

DRAM capacity

Relative performance/cost
1
35
900
2,400,000
6,200,000,000
Chapter 1 — Computer Abstractions and Technology — 30

Chapter 1 — Computer Abstractions and Technology

10

<-----Page 10----->Morgan Kaufmann Publishers

September 14, 2016

Performance




Which computer is better? Even which
computer is faster?
We can not answer the question without
defining what we mean by “better” or
“faster”

Chapter 1 — Computer Abstractions and Technology — 31



Which airplane has the best performance?
Boeing 777

Boeing 777

Boeing 747

Boeing 747

BAC/Sud
Concorde

BAC/Sud
Concorde

Douglas
DC-8-50

Douglas DC8-50
0

100

200

300

400

0

500

Boeing 777

Boeing 777

Boeing 747

Boeing 747

BAC/Sud
Concorde

BAC/Sud
Concorde

Douglas
DC-8-50

Douglas DC8-50
500

1000

4000

6000

8000 10000

Cruising Range (miles)

Passenger Capacity

0

2000

§1.4 Performance

Defining Performance

1500

0

100000 200000 300000 400000

Cruising Speed (mph)

Passengers x mph

Chapter 1 — Computer Abstractions and Technology — 32

Response Time and Throughput


Response time



Throughput





How long it takes to do a task
Total work done per unit time









e.g., tasks/transactions/… per hour

How are response time and throughput affected
by
Replacing the processor with a faster version?
Adding more processors?

We’ll focus on response time for now…
Chapter 1 — Computer Abstractions and Technology — 33

Chapter 1 — Computer Abstractions and Technology

11

<-----Page 11----->Morgan Kaufmann Publishers

September 14, 2016

Relative Performance



Define Performance = 1/Execution Time
“X is n time faster than Y”
Performanc e X Performanc e Y
 Execution time Y Execution time X  n



Example: time taken to run a program





10s on A, 15s on B
Execution TimeB / Execution TimeA
= 15s / 10s = 1.5
So A is 1.5 times faster than B (speedup)
Chapter 1 — Computer Abstractions and Technology — 34

Measuring Execution Time


Elapsed time


Total response time, including all aspects



Determines system performance





Processing, I/O, OS overhead, idle time

CPU time


Time spent processing a given job



Comprises user CPU time and system CPU
time
Different programs are affected differently by
CPU and system performance





Discounts I/O time, other jobs’ shares

Chapter 1 — Computer Abstractions and Technology — 35

CPU Clocking


Operation of digital hardware governed by a
constant-rate clock
Clock period

Clock (cycles)
Data transfer
and computation
Update state



Clock period: duration of a clock cycle




e.g., 250ps = 0.25ns = 250×10–12s

Clock frequency (rate): cycles per second


e.g., 4.0GHz = 4000MHz = 4.0×109Hz
Chapter 1 — Computer Abstractions and Technology — 36

Chapter 1 — Computer Abstractions and Technology

12

<-----Page 12----->Morgan Kaufmann Publishers

September 14, 2016

CPU Time
CPU Time  CPU Clock Cycles  Clock Cycle Time



CPU Clock Cycles
Clock Rate

Performance improved by




Reducing number of clock cycles
Increasing clock rate
Hardware designer must often trade off clock
rate against cycle count

Chapter 1 — Computer Abstractions and Technology — 37

CPU Time Example



Computer A: 2GHz clock, 10s CPU time
Designing Computer B





Aim for 6s CPU time
Can do faster clock, but causes 1.2 × clock cycles

How fast must Computer B clock be?

Clock RateB 

Clock CyclesB 1.2  Clock Cycles A

CPU Time B
6s

Clock CyclesA  CPU Time A  Clock Rate A
 10s  2GHz  20  10 9
Clock RateB 

1.2  20  10 9 24  10 9

 4GHz
6s
6s
Chapter 1 — Computer Abstractions and Technology — 38

Instruction Count and CPI
Clock Cycles  Instruction Count  Cycles per Instruction
CPU Time  Instruction Count  CPI  Clock Cycle Time


Instruction Count  CPI
Clock Rate



Instruction Count for a program



Average cycles per instruction






Determined by program, ISA and compiler
Determined by CPU hardware
If different instructions have different CPI


Average CPI affected by instruction mix
Chapter 1 — Computer Abstractions and Technology — 39

Chapter 1 — Computer Abstractions and Technology

13

<-----Page 13----->Morgan Kaufmann Publishers

September 14, 2016

CPI Example





Computer A: Cycle Time = 250ps, CPI = 2.0
Computer B: Cycle Time = 500ps, CPI = 1.2
Same ISA
Which is faster, and by how much?
CPU Time

A

CPU Time
CPU Time
CPU Time

B

 Instruction Count  CPI  Cycle Time
A
A
 I  2.0  250ps  I  500ps
A is faster…
 Instruction Count  CPI  Cycle Time
B
B
 I  1.2  500ps  I  600ps

B  I  600ps  1.2
I  500ps
A

…by this much

Chapter 1 — Computer Abstractions and Technology — 40

CPI in More Detail


If different instruction classes take different
numbers of cycles
n

Clock Cycles   (CPIi  Instruction Count i )
i 1



CPI 

Weighted average CPI
n
Clock Cycles
Instruction Count i 

   CPIi 

Instruction Count i1 
Instruction Count 

Relative frequency
Chapter 1 — Computer Abstractions and Technology — 41

CPI Example


Alternative compiled code sequences using
instructions in classes A, B, C






Class

A

B

CPI for class

1

2

3

IC in sequence 1

2

1

2

IC in sequence 2

4

1

1

Sequence 1: IC = 5
Clock Cycles
= 2×1 + 1×2 + 2×3
= 10
Avg. CPI = 10/5 = 2.0






C

Sequence 2: IC = 6
Clock Cycles
= 4×1 + 1×2 + 1×3
=9
Avg. CPI = 9/6 = 1.5

Chapter 1 — Computer Abstractions and Technology — 42

Chapter 1 — Computer Abstractions and Technology

14

<-----Page 14----->Morgan Kaufmann Publishers

September 14, 2016

Performance Summary
The BIG Picture

IC

CPI

TC

Instructio ns Clock cycles Seconds
CPU Time 


Program
Instruction Clock cycle


Performance depends on





Algorithm: affects IC, possibly CPI
Programming language: affects IC, CPI
Compiler: affects IC, CPI
Instruction set architecture: affects IC, CPI, Tc
Chapter 1 — Computer Abstractions and Technology — 43

Benchmarks







Performance is not determined by
measuring the performance of a single
program.
A bunch of programs to measure
performance
SPEC CPU for example
Spec rating is geometric mean of
performance (1/execution_time)

Chapter 1 — Computer Abstractions and Technology — 44

Reporting Performance








Assume 3programs and 3 systems
P1
P2
P3
A
10
8
25
B
12
9
20
C
8
8
30
Arithmetic mean
Geometric mean

Chapter 1 — Computer Abstractions and Technology — 45

Chapter 1 — Computer Abstractions and Technology

15

<-----Page 15----->Morgan Kaufmann Publishers

September 14, 2016

Reporting Performance





2 Programs and 3 machines
A
B
C
P1
1
10
20
P2
1000
100
20

Chapter 1 — Computer Abstractions and Technology — 46

SPEC Cfp2000
Bencmark Ultra5 t Optero
n

EPECR Itanium SPECR O/I
atio
2
atio
time

O/ISpe
cR

wupwise

1600

51.5

31.06

56.1

28.53

0.92

0.92

Swim

3100

125

24.73

70.7

43.85

1.77

1.77

Mgrid

1800

98

18.37

65.8

27.36

1.49

1.49

Applu

2100

94

22.43

50.9

41.25

1.85

1.85

Mesa

1400

64.6

21.69

108.0

12.99

0.6

0.6

Galgel

2900

86.4

33.57

40.0

72.47

2.16

2.16

Art

2600

92

28.13

21.0

123.67

4.40

4.40

Equake

1300

72.6

17.92

36.3

35.78

2.00

2.00

Facerec

1900

73.6

25.80

86.9

21.86

0.85

0.85

Ammp

2200

136

16.14

132.0

16.63

1.03

1.03

Lucas

2000

88.8

22.52

107.0

18.76

0.83

0.83

Fma3d

2100

120

17.48

131.0

16.09

0.92

0.92

Sixtrack

1100

123

8.95

68.8

15.99

1.79

1.79

Aspi

2600

150

17.36

231.0

11.27

0.65

0.65

27.12

1.30

1.30

GM

20.86

Chapter 1 — Computer Abstractions and Technology

16

