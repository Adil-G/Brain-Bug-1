<-----Page 0----->Trees

<-----Page 1----->What is a Tree
• In computer science, a tree
is an abstract model of a
hierarchical structure
• A tree consists of nodes
with a parent-child relation

Computers”R”Us

Sales

CAN

Manufacturing

International

Laptops

R&D

Desktops

• Applications:
– Organization charts
Europe
– File systems
– Programming environments

Last Update: Oct 21, 2014

Trees

Asia

USA

2

<-----Page 2----->Tree Terminology

For a node x:
• Ancestors: x, parent, grandparent, great-grandparent, etc.
• Descendants: x, children, grandchildren, great-grandchildren, etc.
• Proper ancestors/descendants: exclude x itself.
• Depth: number of proper ancestors of x.
A

For a tree:
• Root: node without parent (A)
• Internal node: node with at least one child
(A, B, C, F)
• External node (aka, leaf ): node without
children (E, I, J, K, G, H, D)
E
• Height: maximum node depth (3)
• Subtree: tree consisting of a node and
its descendants

Last Update: Oct 21, 2014

Trees

B

F

I

D

C

J

G

H

K

3

<-----Page 3----->A recursive view
of Trees
v

T1

Last Update: Oct 21, 2014

T2

Trees

Tk

4

<-----Page 4----->Tree ADT
• We use positions to abstract nodes
• Generic methods:
–
–
–
–



integer size()
boolean isEmpty()
Iterator iterator()
Iterable positions()




• Accessor methods:
–
–
–
–

• Query methods:

•

position root()
position parent(p)
Iterable children(p)
Integer numChildren(p)

Last Update: Oct 21, 2014

Trees

boolean isInternal(p)
boolean isExternal(p)
boolean isRoot(p)

Additional update methods
may be defined by data
structures implementing
the Tree ADT

5

<-----Page 5----->Java Tree interface

Last Update: Oct 21, 2014

Trees

6

<-----Page 6----->Tree Traversals
• A traversal method is a systematic way to explore the
tree structure by visiting its nodes in a specific order.
• Very useful computational tool with many applications.
• Important tree traversals:
–
–
–
–
–

Preorder
Postorder
Inorder
Euler tour (generalizes the above three)
Level order (aka, Breadth First Search)  not shown in these slides.
Generalized BFS on graphs will be discussed later in the course.

Last Update: Oct 21, 2014

Trees

7

<-----Page 7----->Preorder Traversal
Algorithm preOrder(v)
• A traversal visits the nodes of
visit(v)
a tree in a systematic manner
for each child w of v
• In a preorder traversal, a node is
preorder (w)
visited before its descendants
• Application: print a structured document
1

Make Money Fast!

2

5

1. Motivations

3

4

1.1 Greed

1.2 Avidity

Last Update: Oct 21, 2014

6

9
2. Methods

7

2.1 Stock
Fraud
Trees

2.2 Ponzi
Scheme

References

8
2.3 Bank
Robbery
8

<-----Page 8----->Postorder Traversal
• In a postorder traversal, a
node is visited after its
descendants
• Application: compute space
used by files in a directory
9
and its subdirectories

Algorithm postOrder(v)
for each child w of v
postOrder (w)
visit(v)

EECS2011/

3

7

assignments/

todo.txt
1K

programs/

1

2

A1.doc
3K

A2.doc
2K

Last Update: Oct 21, 2014

8

4

5

LinOpt.java
10K
Trees

Stocks.java
25K

6
Robot.java
20K
9

<-----Page 9----->Binary Trees
 A binary tree is a tree such that:



 Each internal node has at most two children
(exactly two for proper binary trees)
 The children of a node are an ordered pair
 We call the children of an internal node
left child and right child
 A leaf node has no children





arithmetic expressions
decision processes
searching
A

B

 Recursive definition of a binary tree T:
 T consists of an external root node, or
 T has internal root whose left and right
subtrees are binary trees.

Applications:

C

D

E

H
Last Update: Oct 21, 2014

Trees

F

I

G

J
10

<-----Page 10----->A recursive view
of Binary Trees
node v

right
subtree
of
v

left
subtree
of
v
Last Update: Oct 21, 2014

Trees

11

<-----Page 11----->Arithmetic Expression Tree
• Binary tree associated with an arithmetic expression
– internal nodes: operators
– external nodes: operands

• Example: arithmetic expression tree for the expression

( (2  (a – 1) ) + (3  b) )
+





2
a
Last Update: Oct 21, 2014

3

b

1
Trees

12

<-----Page 12----->Decision Tree
• Binary tree associated with a decision process
– internal nodes: questions with yes/no answer
– external nodes: decisions

• Example: dining decision
Want a fast meal?
No

Yes

How about coffee?

On expense account?

Yes

No

Yes

No

Starbucks

Chipotle

Gracie’s

Café Paragon

Last Update: Oct 21, 2014

Trees

13

<-----Page 13----->Properties of Proper Binary Trees
Notation:
n
e
i
h

Properties:
 e=i+1
 n = i + e = 2e - 1
 hi
 h  (n - 1)/2
 e  2h
 h  log2 e
 h  log2 (n + 1) - 1

number of nodes
number of external nodes
number of internal nodes
height

Last Update: Oct 21, 2014

Trees

14

<-----Page 14----->BinaryTree ADT
• The BinaryTree ADT
• The above position
extends the Tree ADT,
methods return null
i.e., inherits all methods when there is no left,
of Tree ADT
right, or sibling of p,
respectively
• Additional methods:
position left(p)
position right(p)
position sibling(p)
boolean isInternal(p)
boolean isExternal(p)
Last Update: Oct 21, 2014

• Update methods
may be defined by data
structures implementing
the BinaryTree ADT
Trees

15

<-----Page 15----->Inorder Traversal
Algorithm inOrder(v)
• In an inorder traversal a node is
if isInternal(v)
visited after its left subtree and
then inOrder( left(v) )
before its right subtree
visit(v)
if isInternal(v)
• Application: draw a binary tree.
then inOrder( right(v) )
Planar node coordinates:
6
x(v) = inorder rank of v
y(v) = depth of v
2
8
1

4

3
Last Update: Oct 21, 2014

Trees

7

9

5
16

<-----Page 16----->Print Arithmetic Expressions
Specialization of inorder traversal
– print operand or operator when
visiting node
– print “(” before traversing left subtree
– print “)” after traversing right subtree

+





2

a
Last Update: Oct 21, 2014

3

Algorithm printExpr(v)
if isInternal(v) then
print( “(” )
printExpr ( left(v) )
print( v.element () )
if isInternal(v) then
printExpr ( right(v) )
print ( “)” )

((2  (a - 1)) + (3  b))

b

1
Trees

17

<-----Page 17----->Evaluate Arithmetic Expressions
• Specialization of postorder:
– recursive method returning the
value of a subtree
– when visiting an internal node,
combine the values of its left &
right subtrees

+





2

5
Last Update: Oct 21, 2014

3

Algorithm evalExpr(v)
if isExternal (v) then
return v.element()
else
x  evalExpr(left(v))
y  evalExpr(right(v))
  v.element()
return x  y

2

1
Trees

18

<-----Page 18----->Euler Tour Traversal
• Generic traversal of a binary tree
• Includes as special cases: preorder, postorder and inorder
• Walk around the tree and visit each node three times:
– on the left (preorder)
– from below (inorder)
– on the right (postorder)
+
L

2





R

B


5

Last Update: Oct 21, 2014

3

2

1
Trees

19

<-----Page 19----->Template Method Pattern
public abstract class EulerTour {
protected BinaryTree tree;
protected void visitExternal(Position p, Result r) { }
protected void visitLeft(Position p, Result r) { }
protected void visitBelow(Position p, Result r) { }
protected void visitRight(Position p, Result r) { }

protected Object eulerTour(Position p) {
Result r = new Result(); // local variable
if tree.isExternal(p) { visitExternal(p, r); }
else {
visitLeft(p, r);
r.leftResult = eulerTour(tree.left(p));
visitBelow(p, r);
r.rightResult = eulerTour(tree.right(p));
visitRight(p, r);
}
return r.finalResult;
}

•
•
•
•

Generic algorithm that can be
specialized by redefining
certain steps
Implemented by means of an
abstract Java class
Visit methods can be
redefined by subclasses
Template method eulerTour
– Recursively called on the left
and right children
– A local variable r of type
Result with fields leftResult,
rightResult and finalResult
keeps track of the output of
the recursive calls to
eulerTour

}
Last Update: Oct 21, 2014

Trees

20

<-----Page 20----->Specializations of EulerTour
public class EvaluateExpression
extends EulerTour {
protected void visitExternal(Position p, Result r) {
r.finalResult = (Integer) p.element();
}
protected void visitRight(Position p, Result r) {
Operator op = (Operator) p.element();
r.finalResult = op.operation(
(Integer) r.leftResult,
(Integer) r.rightResult
);
}

• We show how to specialize
class EulerTour to evaluate
an arithmetic expression
• Assumptions
– External nodes store Integer
objects
– Internal nodes store Operator
objects supporting method
operation(Integer, Integer)

// … the rest omitted …
}

Last Update: Oct 21, 2014

Trees

21

<-----Page 21----->– Element
– Parent node
– list of children nodes

B

B

C


A

D

A

child list



node

• Node objects implement the
Position ADT

children

• A node is represented by an
object storing

parent

element

Linked Structure for Trees



F




E
C

Last Update: Oct 21, 2014

F

D

Trees

E
22

<-----Page 22----->Linked Structure for Binary Trees
• A node is represented by an object
storing
– Element
– Parent node
– left child node
– Right child node

• Node objects implement the
Position ADT

B
A

Last Update: Oct 21, 2014

B

A

D


D
C




C

E
Trees




E
23

<-----Page 23----->Array-Based Representation of
Binary Trees
0
a

Nodes are stored in an array A
a

b

d

0

1

2

…

g
9

h

2

1

…

b

d

10

3

Node v is stored at A[rank(v)]
 rank(root) = 0
 rank(left(node))
= 2  rank(node) + 1
 rank(right(node)) = 2  rank(node) + 2
 rank(parent(node)) = (rank(node) -1)/2

Last Update: Oct 21, 2014

Trees

4
e

5

f

6
c

j

10

9
g

h

24

<-----Page 24----->Comparison
Linked Structure
• Requires explicit
representation of 3 links per
position:

Array
• Parent and children are
implicitly represented:
– Lower memory requirements
per position

– parent, left child, right child

• Data structure grows as
needed – no wasted space.

Last Update: Oct 21, 2014

• Memory requirements
determined by height of
tree. If tree is sparse, this is
highly inefficient.

Trees

25

<-----Page 25----->Summary
• The Tree ADT, tree terminologies, and Java interface
• Tree Traversals
– Preorder
– Postorder

– Inorder
– Euler Tour
– Level order (aka, breadth first search)

• Binary trees: properties & some applications
• Linked list & array based representations of trees.

Last Update: Oct 21, 2014

Trees

26

<-----Page 26----->Last Update: Oct 21, 2014

Trees

27

