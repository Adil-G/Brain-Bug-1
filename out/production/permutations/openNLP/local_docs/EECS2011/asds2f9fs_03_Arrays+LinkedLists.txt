<-----Page 0----->Arrays &
Linked Lists

<-----Page 1----->Part 1: Arrays

<-----Page 2----->Array Definition
• An array is a sequenced collection of variables
all of the same type. Each variable, or cell, in an
array has an index, which uniquely refers to the
value stored in that cell. The cells of an array, A,
are numbered 0, 1, 2, and so on.
• Each value stored in an array is often called an
element of that array.
A
0 1 2
Last Update: Sep 22, 2016

i

n

EECS2011: Arrays & Linked Lists

3

<-----Page 3----->Array Length and Capacity
• Since the length of an array determines the maximum
number of things that can be stored in the array, we will
sometimes refer to the length of an array as its capacity.
• In Java, the length of an array named a can be accessed
using the syntax a.length. Thus, the cells of an array, a,
are numbered 0, 1, 2, , a.length−1, and the cell with
index k can be accessed with syntax a[k].

a
0 1 2
Last Update: Sep 22, 2016

k

n

EECS2011: Arrays & Linked Lists

4

<-----Page 4----->Declaring Arrays (first way)
• Use an assignment to a literal form when initially declaring
the array, using a syntax as:

• The elementType can be any Java primitive type or class
name, and arrayName can be any valid Java identifier. The
initial values must be of the same type as the array.

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

5

<-----Page 5----->Declaring Arrays (second way)
• Use the new operator.
o However, because an array is not an instance of a class,
we do not use a typical constructor.
Instead we use the syntax:

new elementType[length]
• length is a positive integer denoting the length of
the new array.
• The new operator returns a reference to the new
array, and typically this would be assigned to an
array variable.

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

6

<-----Page 6----->Arrays of Characters or Object
References
• An array can store primitive elements, such as
characters.

• An array can also store references to objects.

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

7

<-----Page 7----->Java Example: Game Entries
A game entry stores the name of a player and her best score so far in a game

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

8

<-----Page 8----->Java Example: Scoreboard
Keep track of players and their best scores in an array, board
o The elements of board are objects of class GameEntry
o Array board is sorted by score
in

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

9

<-----Page 9----->Adding an Entry
• To add an entry e into array board at index i, we need
to make room for it by shifting forward the n - i
entries board[i], …, board[n – 1]
board
0 1 2

i

n

0 1 2

i

n

0 1 2

e
i

board
board

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

n

10

<-----Page 10----->Java Example

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

11

<-----Page 11----->Removing an Entry
• To remove the entry e at index i, we need to fill the hole
left by e by shifting backward the n - i - 1 elements
board[i + 1], …, board[n – 1]
board
0 1 2

e
i

n

0 1 2

i

n

0 1 2

i

board
board

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

n
12

<-----Page 12----->Java Example

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

13

<-----Page 13----->Multidimensional arrays
• int[ ][ ] data = new int [2][3];
data = { {6, 13, 17} , {45 , 67, 82} };
data[0][2] = 3;

// 17 replaced by 3

• String[][] irregular2DArray = {
{“Friends:” , “Merry” , “Bob” , “Chris”},
{“Games:” , “baseball” , “soccer”},
{“Places:” , “Toronto” , “Boston” , “Barcelona” , “Beijing”}

};
Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

14

<-----Page 14----->Example: Pascal Triangle

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

15

<-----Page 15----->Example: Pascal Triangle
output

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

16

<-----Page 16----->Some Built-in Methods in
java.util.Arrays Class
static int

binarySearch(int[] a, int key)
Searches the specified array of ints for the specified value using the
binary search algorithm.

static int[]

copyOf(int[] original, int newLength)
Copies the specified array, truncating or padding with zeros (if
necessary) so the copy has the specified length.

static int[]

copyOfRange(int[] original, int from, int to)
Copies the specified range of the specified array into a new array.

static boolean equals(int[] a, int[] a2)
Returns true if the two specified arrays of ints are equal to one another.
static void

sort(int[] a)
Sorts the specified array into ascending numerical order.

static String

toString(int[] a)
Returns a string representation of the contents of the specified array.

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

17

<-----Page 17----->Part 1: Summary
• Arrays:
o
o
o
o
o
o
o

Definition
Declaration
Element types
Java examples
Adding & removing entries
Multidimensional arrays
Built-in Methods in java.util.Arrays Class

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

18

<-----Page 18----->Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

19

<-----Page 19----->Part 2:
Singly Linked Lists

<-----Page 20----->Singly Linked List
• A singly linked list is a concrete
data structure consisting of a
sequence of nodes, starting from
a head pointer
• Each node stores

next

node

element

o element
o link to the next node
head



A
Last Update: Sep 22, 2016

B

C

EECS2011: Arrays & Linked Lists

D
21

<-----Page 21----->A Nested Node Class

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

22

<-----Page 22----->Accessor Methods

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

23

<-----Page 23----->Inserting at the Head
a) Current list
b) Allocate new node
Insert new element
Have new node point
to old head
c) Update head to point
to new node

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

24

<-----Page 24----->Inserting at the Tail
a)

Current list

b)

Allocate a new node
Insert new element
Have new node point to null

c)

Have old last node point to new node
Update tail to point to new node

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

25

<-----Page 25----->Java Methods

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

26

<-----Page 26----->Removing at the Head
a)

Current list

b) Update head to point to next
node in the list

c)

Allow garbage collector to reclaim
the former first node

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

27

<-----Page 27----->Java Method

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

28

<-----Page 28----->Removing at the Tail
• Removing at the tail of a singly linked list is not efficient!
• It’s impossible in constant-time to access the predecessor of
the tail node.
• You need linear-time to scan through the list from head to tail.

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

29

<-----Page 29----->Part 2: Summary
•
•
•
•

Singly linked list structure
A nested node class
Accessor methods
Insertion:
o at the tail
o at the head

• Removing
o at the head
o at the tail - inefficient

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

30

<-----Page 30----->Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

31

<-----Page 31----->Part 3:
Doubly Linked Lists

<-----Page 32----->Doubly Linked List
• A doubly linked list can be traversed
forward and backward
• Nodes store:
o element
o link to the previous node
o link to the next node

prev

next

element

node

• Special trailer and header nodes
nodes/positions

header

trailer

elements
Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

33

<-----Page 33----->Insertion
• Insert a new node, q, between p and its successor.

p

A

B

C

p

A

q

B

C

X
p
A
Last Update: Sep 22, 2016

q
B

EECS2011: Arrays & Linked Lists

X

C
34

<-----Page 34----->Deletion
• Remove a node, p, from a doubly linked list.

A

B

C

A

B

C

p
D

p
D

A
Last Update: Sep 22, 2016

B
EECS2011: Arrays & Linked Lists

C
35

<-----Page 35----->Doubly-Linked List in Java

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

36

<-----Page 36----->Doubly-Linked List in Java, 2

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

37

<-----Page 37----->Doubly-Linked List in Java, 3

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

38

<-----Page 38----->Doubly-Linked List in Java, 4

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

39

<-----Page 39----->Circular Linked Lists
• We can form a circular linked list by identifying
the header and trailer sentinel nodes.
• Varieties of Circular Linked Lists:
– Singly Linked Circular Lists (SLCL).
– Doubly Linked Circular Lists (DLCL).

• With DLCL it is possible to perform the following
operations in constant time:
– Inserting an item at any given position in the list.
– Deleting an item from any given position in the list.

– Concatenating two lists of same type (by interlacing).
Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

40

<-----Page 40----->Part 3: Summary
•
•
•
•
•
•

Doubly linked list structure
A nested node class
Accessor methods
Insertion at any given position
Removal of any given node
Singly & Doubly Linked Circular Lists

Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

41

<-----Page 41----->Last Update: Sep 22, 2016

EECS2011: Arrays & Linked Lists

42

